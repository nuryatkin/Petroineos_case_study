{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af389c86",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e90926c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "You are provided with data with 10-mins, 60-mins and 1-day resolution (Merge.csv)\n",
    "Please merge them into a pandas Dataframe with 2-hours resolution in between 7:00 – 17:00\n",
    "only as index.\n",
    "Please take the average of the 10-mins and 60-mins resolution prices during the 2-hours\n",
    "window and forward fill the 1-day resolution prices in the 2-hours window."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "99c94c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('Merge.csv')\n",
    "\n",
    "data['Datetime'] = pd.to_datetime(data['Datetime'])\n",
    "data.set_index(\"Datetime\",inplace=True)\n",
    "\n",
    "df_10min = data[data['Resolution']=='10MIN'].resample('2H', offset='7H')[['Price']].agg(['mean'])\n",
    "\n",
    "df_1H = data[data['Resolution']=='1H'].resample('2H', offset='7H')[['Price']].agg(['mean'])\n",
    "\n",
    "df_D = data[data['Resolution']=='D']\n",
    "\n",
    "df_both = pd.merge(df_10min,df_1H,right_index=True,left_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "8a6c48a4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3ae687e7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "219d1812",
   "metadata": {},
   "outputs": [],
   "source": [
    "You are provided with a daily energy consumption data from 2016 to date (Consumption.csv).\n",
    "Please create a Pandas DataFrame with to show the consumption of each year. The expected format\n",
    "is to have the year number as column name and mm-dd as index.\n",
    "Please also create a seasonal plot showing 5-years (2016-2020) range (shaded) & average (dashed\n",
    "line), and year 2021 (line) & 2022 (line).\n",
    "Please comment on your observation on the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "7e7e6698",
   "metadata": {},
   "outputs": [],
   "source": [
    "consumption = pd.read_csv('Consumption.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dc9e86f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fca7e3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "1800 2100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58caba4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "366 - 2016\n",
    "365 - 2017\n",
    "365 - 2018\n",
    "365 - 2019\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "47d688d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1827"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "366+365+365+365+366"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c12815c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "1461\n",
    "\n",
    "1826"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "c2ed53d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/01/2016</td>\n",
       "      <td>276.2910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02/01/2016</td>\n",
       "      <td>294.6780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03/01/2016</td>\n",
       "      <td>306.3096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04/01/2016</td>\n",
       "      <td>370.0566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05/01/2016</td>\n",
       "      <td>367.3998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2463</th>\n",
       "      <td>29/09/2022</td>\n",
       "      <td>258.0822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2464</th>\n",
       "      <td>30/09/2022</td>\n",
       "      <td>242.5950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2465</th>\n",
       "      <td>01/10/2022</td>\n",
       "      <td>188.0658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2466</th>\n",
       "      <td>02/10/2022</td>\n",
       "      <td>190.6092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2467</th>\n",
       "      <td>03/10/2022</td>\n",
       "      <td>210.3246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2468 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date  Consumption\n",
       "0     01/01/2016     276.2910\n",
       "1     02/01/2016     294.6780\n",
       "2     03/01/2016     306.3096\n",
       "3     04/01/2016     370.0566\n",
       "4     05/01/2016     367.3998\n",
       "...          ...          ...\n",
       "2463  29/09/2022     258.0822\n",
       "2464  30/09/2022     242.5950\n",
       "2465  01/10/2022     188.0658\n",
       "2466  02/10/2022     190.6092\n",
       "2467  03/10/2022     210.3246\n",
       "\n",
       "[2468 rows x 2 columns]"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consumption"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "3cc53312",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2020-01-01\n",
       "1     2020-01-02\n",
       "2     2020-01-03\n",
       "3     2020-01-04\n",
       "4     2020-01-05\n",
       "         ...    \n",
       "361   2020-12-27\n",
       "362   2020-12-28\n",
       "363   2020-12-29\n",
       "364   2020-12-30\n",
       "365   2020-12-31\n",
       "Length: 366, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "dbb14f75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2020-01-01\n",
       "1     2020-01-02\n",
       "2     2020-01-03\n",
       "3     2020-01-04\n",
       "4     2020-01-05\n",
       "         ...    \n",
       "361   2020-12-27\n",
       "362   2020-12-28\n",
       "363   2020-12-29\n",
       "364   2020-12-30\n",
       "365   2020-12-31\n",
       "Length: 366, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "year = 2020\n",
    "dates = pd.Series(pd.date_range(str(year) + \"-01-01\", str(year) + \"-12-31\", freq=\"D\"))\n",
    "dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "71723523",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/p2/2nqh0k8s51j2jn5smm3clmdc0000gn/T/ipykernel_33299/290317693.py:2: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n",
      "  date_list = pd.Series()\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'to_append' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [230]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m year\u001b[38;5;241m=\u001b[39myear\u001b[38;5;241m+\u001b[39mi\n\u001b[1;32m      5\u001b[0m dates \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(pd\u001b[38;5;241m.\u001b[39mdate_range(\u001b[38;5;28mstr\u001b[39m(year) \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m-01-01\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mstr\u001b[39m(year) \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m-12-31\u001b[39m\u001b[38;5;124m\"\u001b[39m, freq\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mD\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n\u001b[0;32m----> 6\u001b[0m date_list\u001b[38;5;241m.\u001b[39mappend(\u001b[43mto_append\u001b[49m,dates)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'to_append' is not defined"
     ]
    }
   ],
   "source": [
    "year = 2016\n",
    "date_list = pd.Series()\n",
    "for i in range(5):\n",
    "    year=year+i\n",
    "    dates = pd.Series(pd.date_range(str(year) + \"-01-01\", str(year) + \"-12-31\", freq=\"D\"))\n",
    "    dates.append(dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "311fa502",
   "metadata": {},
   "outputs": [],
   "source": [
    "LEFT = 0\n",
    "RIGHT = 0\n",
    "UP = 0\n",
    "DOWN = 0\n",
    "\n",
    "X = 0\n",
    "Y = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "9babaade",
   "metadata": {},
   "outputs": [],
   "source": [
    "instructions = 'BEGIN LEFT 3 UP 5 RIGHT 4 DOWN 7 STOP'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "658e7868",
   "metadata": {},
   "outputs": [],
   "source": [
    "split_list = instructions.split(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "faa1205b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['BEGIN', 'LEFT', '3', 'UP', '5', 'RIGHT', '4', 'DOWN', '7', 'STOP']"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "split_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "a7f5e226",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LEFT 3\n",
      "UP 5\n",
      "RIGHT 4\n",
      "DOWN 7\n"
     ]
    }
   ],
   "source": [
    "lenght = len(split_list)-1\n",
    "i=0\n",
    "while i<lenght:\n",
    "    if split_list[i]=='BEGIN':\n",
    "        i=i+1\n",
    "        continue\n",
    "    if split_list[i]=='STOP':\n",
    "        break\n",
    "    command = split_list[i]\n",
    "    i=i+1\n",
    "    step = split_list[i]\n",
    "    i=i+1 \n",
    "    print(command,step)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "316cf7e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_command_step(command,step,X,Y):\n",
    "    if command == 'LEFT':\n",
    "        X=X+step\n",
    "    if command == 'RIGHT':\n",
    "        X=X-step   \n",
    "    if command == 'UP':\n",
    "        Y=Y+step  \n",
    "    if command == 'DOWN':\n",
    "        Y=Y-step    \n",
    "    return (X,Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "057222fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "X,Y = get_command_step('UP',5,0,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "02d86ecc",
   "metadata": {},
   "outputs": [],
   "source": [
    "X,Y = get_command_step('LEFT',3,X,Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "31f6d4b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 5)"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X,Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "66a7f749",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            year   days\n",
      "2020-01-01  2020    1.0\n",
      "2020-01-02  2020    2.0\n",
      "2020-01-03  2020    3.0\n",
      "2020-01-04  2020    4.0\n",
      "2020-01-05  2020    5.0\n",
      "...          ...    ...\n",
      "2020-12-27  2020  362.0\n",
      "2020-12-28  2020  363.0\n",
      "2020-12-29  2020  364.0\n",
      "2020-12-30  2020  365.0\n",
      "2020-12-31  2020  366.0\n",
      "\n",
      "[366 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "year = 2020\n",
    "dates = pd.Series(pd.date_range(str(year) + \"-01-01\", str(year) + \"-12-31\", freq=\"D\"))\n",
    "days = dates.diff().astype(\"timedelta64[D]\").fillna(1).cumsum()\n",
    "#df = pd.DataFrame({\"year\": dates.dt.year, \"days\": days})\n",
    "df = df.set_index(dates)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "adf75e95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>202011</td>\n",
       "      <td>344.9952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>202012</td>\n",
       "      <td>380.8296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1463</th>\n",
       "      <td>202013</td>\n",
       "      <td>356.8698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1464</th>\n",
       "      <td>202014</td>\n",
       "      <td>348.2028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1465</th>\n",
       "      <td>202015</td>\n",
       "      <td>357.5502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1822</th>\n",
       "      <td>20201227</td>\n",
       "      <td>320.3550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1823</th>\n",
       "      <td>20201228</td>\n",
       "      <td>363.7872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1824</th>\n",
       "      <td>20201229</td>\n",
       "      <td>365.9094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1825</th>\n",
       "      <td>20201230</td>\n",
       "      <td>362.6694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1826</th>\n",
       "      <td>20201231</td>\n",
       "      <td>348.4620</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>366 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date  Consumption\n",
       "1461    202011     344.9952\n",
       "1462    202012     380.8296\n",
       "1463    202013     356.8698\n",
       "1464    202014     348.2028\n",
       "1465    202015     357.5502\n",
       "...        ...          ...\n",
       "1822  20201227     320.3550\n",
       "1823  20201228     363.7872\n",
       "1824  20201229     365.9094\n",
       "1825  20201230     362.6694\n",
       "1826  20201231     348.4620\n",
       "\n",
       "[366 rows x 2 columns]"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consumption[(consumption.index>=1461) & (consumption.index<=1826)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "edb958b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dateutil "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8173d771",
   "metadata": {},
   "outputs": [],
   "source": [
    "'202035'\n",
    "'2020215'\n",
    "'2020115' --> 2020 1 15, 2020 11 5\n",
    "ymd\n",
    "'20200305'\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "2dde6803",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2018-06-22\n",
      "2018-06-22\n",
      "2017-12-05\n",
      "2015-12-24\n",
      "2016-01-01\n",
      "2020-03-05\n"
     ]
    }
   ],
   "source": [
    "dates = [ \"2018-06-22\",\n",
    "\"June 22, 2018\",\n",
    "\"12/5/2017\",\n",
    "\"12-24-2015\" ,'01/01/2016','20200305']\n",
    "\n",
    "for date in dates:\n",
    "    print(dateutil.parser.parse(date).strftime(\"%Y-%m-%d\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d54d275e",
   "metadata": {},
   "outputs": [],
   "source": [
    "d/m/y\n",
    "ymd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "43ea234a",
   "metadata": {},
   "outputs": [],
   "source": [
    "mylist = [val for val in consumption['Date'] if '/' in val]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "876b3dd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['01/01/2016',\n",
       " '02/01/2016',\n",
       " '03/01/2016',\n",
       " '04/01/2016',\n",
       " '05/01/2016',\n",
       " '06/01/2016',\n",
       " '07/01/2016',\n",
       " '08/01/2016',\n",
       " '09/01/2016',\n",
       " '10/01/2016',\n",
       " '11/01/2016',\n",
       " '12/01/2016',\n",
       " '13/01/2016',\n",
       " '14/01/2016',\n",
       " '15/01/2016',\n",
       " '16/01/2016',\n",
       " '17/01/2016',\n",
       " '18/01/2016',\n",
       " '19/01/2016',\n",
       " '20/01/2016',\n",
       " '21/01/2016',\n",
       " '22/01/2016',\n",
       " '23/01/2016',\n",
       " '24/01/2016',\n",
       " '25/01/2016',\n",
       " '26/01/2016',\n",
       " '27/01/2016',\n",
       " '28/01/2016',\n",
       " '29/01/2016',\n",
       " '30/01/2016',\n",
       " '31/01/2016',\n",
       " '01/02/2016',\n",
       " '02/02/2016',\n",
       " '03/02/2016',\n",
       " '04/02/2016',\n",
       " '05/02/2016',\n",
       " '06/02/2016',\n",
       " '07/02/2016',\n",
       " '08/02/2016',\n",
       " '09/02/2016',\n",
       " '10/02/2016',\n",
       " '11/02/2016',\n",
       " '12/02/2016',\n",
       " '13/02/2016',\n",
       " '14/02/2016',\n",
       " '15/02/2016',\n",
       " '16/02/2016',\n",
       " '17/02/2016',\n",
       " '18/02/2016',\n",
       " '19/02/2016',\n",
       " '20/02/2016',\n",
       " '21/02/2016',\n",
       " '22/02/2016',\n",
       " '23/02/2016',\n",
       " '24/02/2016',\n",
       " '25/02/2016',\n",
       " '26/02/2016',\n",
       " '27/02/2016',\n",
       " '28/02/2016',\n",
       " '29/02/2016',\n",
       " '01/03/2016',\n",
       " '02/03/2016',\n",
       " '03/03/2016',\n",
       " '04/03/2016',\n",
       " '05/03/2016',\n",
       " '06/03/2016',\n",
       " '07/03/2016',\n",
       " '08/03/2016',\n",
       " '09/03/2016',\n",
       " '10/03/2016',\n",
       " '11/03/2016',\n",
       " '12/03/2016',\n",
       " '13/03/2016',\n",
       " '14/03/2016',\n",
       " '15/03/2016',\n",
       " '16/03/2016',\n",
       " '17/03/2016',\n",
       " '18/03/2016',\n",
       " '19/03/2016',\n",
       " '20/03/2016',\n",
       " '21/03/2016',\n",
       " '22/03/2016',\n",
       " '23/03/2016',\n",
       " '24/03/2016',\n",
       " '25/03/2016',\n",
       " '26/03/2016',\n",
       " '27/03/2016',\n",
       " '28/03/2016',\n",
       " '29/03/2016',\n",
       " '30/03/2016',\n",
       " '31/03/2016',\n",
       " '01/04/2016',\n",
       " '02/04/2016',\n",
       " '03/04/2016',\n",
       " '04/04/2016',\n",
       " '05/04/2016',\n",
       " '06/04/2016',\n",
       " '07/04/2016',\n",
       " '08/04/2016',\n",
       " '09/04/2016',\n",
       " '10/04/2016',\n",
       " '11/04/2016',\n",
       " '12/04/2016',\n",
       " '13/04/2016',\n",
       " '14/04/2016',\n",
       " '15/04/2016',\n",
       " '16/04/2016',\n",
       " '17/04/2016',\n",
       " '18/04/2016',\n",
       " '19/04/2016',\n",
       " '20/04/2016',\n",
       " '21/04/2016',\n",
       " '22/04/2016',\n",
       " '23/04/2016',\n",
       " '24/04/2016',\n",
       " '25/04/2016',\n",
       " '26/04/2016',\n",
       " '27/04/2016',\n",
       " '28/04/2016',\n",
       " '29/04/2016',\n",
       " '30/04/2016',\n",
       " '01/05/2016',\n",
       " '02/05/2016',\n",
       " '03/05/2016',\n",
       " '04/05/2016',\n",
       " '05/05/2016',\n",
       " '06/05/2016',\n",
       " '07/05/2016',\n",
       " '08/05/2016',\n",
       " '09/05/2016',\n",
       " '10/05/2016',\n",
       " '11/05/2016',\n",
       " '12/05/2016',\n",
       " '13/05/2016',\n",
       " '14/05/2016',\n",
       " '15/05/2016',\n",
       " '16/05/2016',\n",
       " '17/05/2016',\n",
       " '18/05/2016',\n",
       " '19/05/2016',\n",
       " '20/05/2016',\n",
       " '21/05/2016',\n",
       " '22/05/2016',\n",
       " '23/05/2016',\n",
       " '24/05/2016',\n",
       " '25/05/2016',\n",
       " '26/05/2016',\n",
       " '27/05/2016',\n",
       " '28/05/2016',\n",
       " '29/05/2016',\n",
       " '30/05/2016',\n",
       " '31/05/2016',\n",
       " '01/06/2016',\n",
       " '02/06/2016',\n",
       " '03/06/2016',\n",
       " '04/06/2016',\n",
       " '05/06/2016',\n",
       " '06/06/2016',\n",
       " '07/06/2016',\n",
       " '08/06/2016',\n",
       " '09/06/2016',\n",
       " '10/06/2016',\n",
       " '11/06/2016',\n",
       " '12/06/2016',\n",
       " '13/06/2016',\n",
       " '14/06/2016',\n",
       " '15/06/2016',\n",
       " '16/06/2016',\n",
       " '17/06/2016',\n",
       " '18/06/2016',\n",
       " '19/06/2016',\n",
       " '20/06/2016',\n",
       " '21/06/2016',\n",
       " '22/06/2016',\n",
       " '23/06/2016',\n",
       " '24/06/2016',\n",
       " '25/06/2016',\n",
       " '26/06/2016',\n",
       " '27/06/2016',\n",
       " '28/06/2016',\n",
       " '29/06/2016',\n",
       " '30/06/2016',\n",
       " '01/07/2016',\n",
       " '02/07/2016',\n",
       " '03/07/2016',\n",
       " '04/07/2016',\n",
       " '05/07/2016',\n",
       " '06/07/2016',\n",
       " '07/07/2016',\n",
       " '08/07/2016',\n",
       " '09/07/2016',\n",
       " '10/07/2016',\n",
       " '11/07/2016',\n",
       " '12/07/2016',\n",
       " '13/07/2016',\n",
       " '14/07/2016',\n",
       " '15/07/2016',\n",
       " '16/07/2016',\n",
       " '17/07/2016',\n",
       " '18/07/2016',\n",
       " '19/07/2016',\n",
       " '20/07/2016',\n",
       " '21/07/2016',\n",
       " '22/07/2016',\n",
       " '23/07/2016',\n",
       " '24/07/2016',\n",
       " '25/07/2016',\n",
       " '26/07/2016',\n",
       " '27/07/2016',\n",
       " '28/07/2016',\n",
       " '29/07/2016',\n",
       " '30/07/2016',\n",
       " '31/07/2016',\n",
       " '01/08/2016',\n",
       " '02/08/2016',\n",
       " '03/08/2016',\n",
       " '04/08/2016',\n",
       " '05/08/2016',\n",
       " '06/08/2016',\n",
       " '07/08/2016',\n",
       " '08/08/2016',\n",
       " '09/08/2016',\n",
       " '10/08/2016',\n",
       " '11/08/2016',\n",
       " '12/08/2016',\n",
       " '13/08/2016',\n",
       " '14/08/2016',\n",
       " '15/08/2016',\n",
       " '16/08/2016',\n",
       " '17/08/2016',\n",
       " '18/08/2016',\n",
       " '19/08/2016',\n",
       " '20/08/2016',\n",
       " '21/08/2016',\n",
       " '22/08/2016',\n",
       " '23/08/2016',\n",
       " '24/08/2016',\n",
       " '25/08/2016',\n",
       " '26/08/2016',\n",
       " '27/08/2016',\n",
       " '28/08/2016',\n",
       " '29/08/2016',\n",
       " '30/08/2016',\n",
       " '31/08/2016',\n",
       " '01/09/2016',\n",
       " '02/09/2016',\n",
       " '03/09/2016',\n",
       " '04/09/2016',\n",
       " '05/09/2016',\n",
       " '06/09/2016',\n",
       " '07/09/2016',\n",
       " '08/09/2016',\n",
       " '09/09/2016',\n",
       " '10/09/2016',\n",
       " '11/09/2016',\n",
       " '12/09/2016',\n",
       " '13/09/2016',\n",
       " '14/09/2016',\n",
       " '15/09/2016',\n",
       " '16/09/2016',\n",
       " '17/09/2016',\n",
       " '18/09/2016',\n",
       " '19/09/2016',\n",
       " '20/09/2016',\n",
       " '21/09/2016',\n",
       " '22/09/2016',\n",
       " '23/09/2016',\n",
       " '24/09/2016',\n",
       " '25/09/2016',\n",
       " '26/09/2016',\n",
       " '27/09/2016',\n",
       " '28/09/2016',\n",
       " '29/09/2016',\n",
       " '30/09/2016',\n",
       " '01/10/2016',\n",
       " '02/10/2016',\n",
       " '03/10/2016',\n",
       " '04/10/2016',\n",
       " '05/10/2016',\n",
       " '06/10/2016',\n",
       " '07/10/2016',\n",
       " '08/10/2016',\n",
       " '09/10/2016',\n",
       " '10/10/2016',\n",
       " '11/10/2016',\n",
       " '12/10/2016',\n",
       " '13/10/2016',\n",
       " '14/10/2016',\n",
       " '15/10/2016',\n",
       " '16/10/2016',\n",
       " '17/10/2016',\n",
       " '18/10/2016',\n",
       " '19/10/2016',\n",
       " '20/10/2016',\n",
       " '21/10/2016',\n",
       " '22/10/2016',\n",
       " '23/10/2016',\n",
       " '24/10/2016',\n",
       " '25/10/2016',\n",
       " '26/10/2016',\n",
       " '27/10/2016',\n",
       " '28/10/2016',\n",
       " '29/10/2016',\n",
       " '30/10/2016',\n",
       " '31/10/2016',\n",
       " '01/11/2016',\n",
       " '02/11/2016',\n",
       " '03/11/2016',\n",
       " '04/11/2016',\n",
       " '05/11/2016',\n",
       " '06/11/2016',\n",
       " '07/11/2016',\n",
       " '08/11/2016',\n",
       " '09/11/2016',\n",
       " '10/11/2016',\n",
       " '11/11/2016',\n",
       " '12/11/2016',\n",
       " '13/11/2016',\n",
       " '14/11/2016',\n",
       " '15/11/2016',\n",
       " '16/11/2016',\n",
       " '17/11/2016',\n",
       " '18/11/2016',\n",
       " '19/11/2016',\n",
       " '20/11/2016',\n",
       " '21/11/2016',\n",
       " '22/11/2016',\n",
       " '23/11/2016',\n",
       " '24/11/2016',\n",
       " '25/11/2016',\n",
       " '26/11/2016',\n",
       " '27/11/2016',\n",
       " '28/11/2016',\n",
       " '29/11/2016',\n",
       " '30/11/2016',\n",
       " '01/12/2016',\n",
       " '02/12/2016',\n",
       " '03/12/2016',\n",
       " '04/12/2016',\n",
       " '05/12/2016',\n",
       " '06/12/2016',\n",
       " '07/12/2016',\n",
       " '08/12/2016',\n",
       " '09/12/2016',\n",
       " '10/12/2016',\n",
       " '11/12/2016',\n",
       " '12/12/2016',\n",
       " '13/12/2016',\n",
       " '14/12/2016',\n",
       " '15/12/2016',\n",
       " '16/12/2016',\n",
       " '17/12/2016',\n",
       " '18/12/2016',\n",
       " '19/12/2016',\n",
       " '20/12/2016',\n",
       " '21/12/2016',\n",
       " '22/12/2016',\n",
       " '23/12/2016',\n",
       " '24/12/2016',\n",
       " '25/12/2016',\n",
       " '26/12/2016',\n",
       " '27/12/2016',\n",
       " '28/12/2016',\n",
       " '29/12/2016',\n",
       " '30/12/2016',\n",
       " '31/12/2016',\n",
       " '01/01/2017',\n",
       " '02/01/2017',\n",
       " '03/01/2017',\n",
       " '04/01/2017',\n",
       " '05/01/2017',\n",
       " '06/01/2017',\n",
       " '07/01/2017',\n",
       " '08/01/2017',\n",
       " '09/01/2017',\n",
       " '10/01/2017',\n",
       " '11/01/2017',\n",
       " '12/01/2017',\n",
       " '13/01/2017',\n",
       " '14/01/2017',\n",
       " '15/01/2017',\n",
       " '16/01/2017',\n",
       " '17/01/2017',\n",
       " '18/01/2017',\n",
       " '19/01/2017',\n",
       " '20/01/2017',\n",
       " '21/01/2017',\n",
       " '22/01/2017',\n",
       " '23/01/2017',\n",
       " '24/01/2017',\n",
       " '25/01/2017',\n",
       " '26/01/2017',\n",
       " '27/01/2017',\n",
       " '28/01/2017',\n",
       " '29/01/2017',\n",
       " '30/01/2017',\n",
       " '31/01/2017',\n",
       " '01/02/2017',\n",
       " '02/02/2017',\n",
       " '03/02/2017',\n",
       " '04/02/2017',\n",
       " '05/02/2017',\n",
       " '06/02/2017',\n",
       " '07/02/2017',\n",
       " '08/02/2017',\n",
       " '09/02/2017',\n",
       " '10/02/2017',\n",
       " '11/02/2017',\n",
       " '12/02/2017',\n",
       " '13/02/2017',\n",
       " '14/02/2017',\n",
       " '15/02/2017',\n",
       " '16/02/2017',\n",
       " '17/02/2017',\n",
       " '18/02/2017',\n",
       " '19/02/2017',\n",
       " '20/02/2017',\n",
       " '21/02/2017',\n",
       " '22/02/2017',\n",
       " '23/02/2017',\n",
       " '24/02/2017',\n",
       " '25/02/2017',\n",
       " '26/02/2017',\n",
       " '27/02/2017',\n",
       " '28/02/2017',\n",
       " '01/03/2017',\n",
       " '02/03/2017',\n",
       " '03/03/2017',\n",
       " '04/03/2017',\n",
       " '05/03/2017',\n",
       " '06/03/2017',\n",
       " '07/03/2017',\n",
       " '08/03/2017',\n",
       " '09/03/2017',\n",
       " '10/03/2017',\n",
       " '11/03/2017',\n",
       " '12/03/2017',\n",
       " '13/03/2017',\n",
       " '14/03/2017',\n",
       " '15/03/2017',\n",
       " '16/03/2017',\n",
       " '17/03/2017',\n",
       " '18/03/2017',\n",
       " '19/03/2017',\n",
       " '20/03/2017',\n",
       " '21/03/2017',\n",
       " '22/03/2017',\n",
       " '23/03/2017',\n",
       " '24/03/2017',\n",
       " '25/03/2017',\n",
       " '26/03/2017',\n",
       " '27/03/2017',\n",
       " '28/03/2017',\n",
       " '29/03/2017',\n",
       " '30/03/2017',\n",
       " '31/03/2017',\n",
       " '01/04/2017',\n",
       " '02/04/2017',\n",
       " '03/04/2017',\n",
       " '04/04/2017',\n",
       " '05/04/2017',\n",
       " '06/04/2017',\n",
       " '07/04/2017',\n",
       " '08/04/2017',\n",
       " '09/04/2017',\n",
       " '10/04/2017',\n",
       " '11/04/2017',\n",
       " '12/04/2017',\n",
       " '13/04/2017',\n",
       " '14/04/2017',\n",
       " '15/04/2017',\n",
       " '16/04/2017',\n",
       " '17/04/2017',\n",
       " '18/04/2017',\n",
       " '19/04/2017',\n",
       " '20/04/2017',\n",
       " '21/04/2017',\n",
       " '22/04/2017',\n",
       " '23/04/2017',\n",
       " '24/04/2017',\n",
       " '25/04/2017',\n",
       " '26/04/2017',\n",
       " '27/04/2017',\n",
       " '28/04/2017',\n",
       " '29/04/2017',\n",
       " '30/04/2017',\n",
       " '01/05/2017',\n",
       " '02/05/2017',\n",
       " '03/05/2017',\n",
       " '04/05/2017',\n",
       " '05/05/2017',\n",
       " '06/05/2017',\n",
       " '07/05/2017',\n",
       " '08/05/2017',\n",
       " '09/05/2017',\n",
       " '10/05/2017',\n",
       " '11/05/2017',\n",
       " '12/05/2017',\n",
       " '13/05/2017',\n",
       " '14/05/2017',\n",
       " '15/05/2017',\n",
       " '16/05/2017',\n",
       " '17/05/2017',\n",
       " '18/05/2017',\n",
       " '19/05/2017',\n",
       " '20/05/2017',\n",
       " '21/05/2017',\n",
       " '22/05/2017',\n",
       " '23/05/2017',\n",
       " '24/05/2017',\n",
       " '25/05/2017',\n",
       " '26/05/2017',\n",
       " '27/05/2017',\n",
       " '28/05/2017',\n",
       " '29/05/2017',\n",
       " '30/05/2017',\n",
       " '31/05/2017',\n",
       " '01/06/2017',\n",
       " '02/06/2017',\n",
       " '03/06/2017',\n",
       " '04/06/2017',\n",
       " '05/06/2017',\n",
       " '06/06/2017',\n",
       " '07/06/2017',\n",
       " '08/06/2017',\n",
       " '09/06/2017',\n",
       " '10/06/2017',\n",
       " '11/06/2017',\n",
       " '12/06/2017',\n",
       " '13/06/2017',\n",
       " '14/06/2017',\n",
       " '15/06/2017',\n",
       " '16/06/2017',\n",
       " '17/06/2017',\n",
       " '18/06/2017',\n",
       " '19/06/2017',\n",
       " '20/06/2017',\n",
       " '21/06/2017',\n",
       " '22/06/2017',\n",
       " '23/06/2017',\n",
       " '24/06/2017',\n",
       " '25/06/2017',\n",
       " '26/06/2017',\n",
       " '27/06/2017',\n",
       " '28/06/2017',\n",
       " '29/06/2017',\n",
       " '30/06/2017',\n",
       " '01/07/2017',\n",
       " '02/07/2017',\n",
       " '03/07/2017',\n",
       " '04/07/2017',\n",
       " '05/07/2017',\n",
       " '06/07/2017',\n",
       " '07/07/2017',\n",
       " '08/07/2017',\n",
       " '09/07/2017',\n",
       " '10/07/2017',\n",
       " '11/07/2017',\n",
       " '12/07/2017',\n",
       " '13/07/2017',\n",
       " '14/07/2017',\n",
       " '15/07/2017',\n",
       " '16/07/2017',\n",
       " '17/07/2017',\n",
       " '18/07/2017',\n",
       " '19/07/2017',\n",
       " '20/07/2017',\n",
       " '21/07/2017',\n",
       " '22/07/2017',\n",
       " '23/07/2017',\n",
       " '24/07/2017',\n",
       " '25/07/2017',\n",
       " '26/07/2017',\n",
       " '27/07/2017',\n",
       " '28/07/2017',\n",
       " '29/07/2017',\n",
       " '30/07/2017',\n",
       " '31/07/2017',\n",
       " '01/08/2017',\n",
       " '02/08/2017',\n",
       " '03/08/2017',\n",
       " '04/08/2017',\n",
       " '05/08/2017',\n",
       " '06/08/2017',\n",
       " '07/08/2017',\n",
       " '08/08/2017',\n",
       " '09/08/2017',\n",
       " '10/08/2017',\n",
       " '11/08/2017',\n",
       " '12/08/2017',\n",
       " '13/08/2017',\n",
       " '14/08/2017',\n",
       " '15/08/2017',\n",
       " '16/08/2017',\n",
       " '17/08/2017',\n",
       " '18/08/2017',\n",
       " '19/08/2017',\n",
       " '20/08/2017',\n",
       " '21/08/2017',\n",
       " '22/08/2017',\n",
       " '23/08/2017',\n",
       " '24/08/2017',\n",
       " '25/08/2017',\n",
       " '26/08/2017',\n",
       " '27/08/2017',\n",
       " '28/08/2017',\n",
       " '29/08/2017',\n",
       " '30/08/2017',\n",
       " '31/08/2017',\n",
       " '01/09/2017',\n",
       " '02/09/2017',\n",
       " '03/09/2017',\n",
       " '04/09/2017',\n",
       " '05/09/2017',\n",
       " '06/09/2017',\n",
       " '07/09/2017',\n",
       " '08/09/2017',\n",
       " '09/09/2017',\n",
       " '10/09/2017',\n",
       " '11/09/2017',\n",
       " '12/09/2017',\n",
       " '13/09/2017',\n",
       " '14/09/2017',\n",
       " '15/09/2017',\n",
       " '16/09/2017',\n",
       " '17/09/2017',\n",
       " '18/09/2017',\n",
       " '19/09/2017',\n",
       " '20/09/2017',\n",
       " '21/09/2017',\n",
       " '22/09/2017',\n",
       " '23/09/2017',\n",
       " '24/09/2017',\n",
       " '25/09/2017',\n",
       " '26/09/2017',\n",
       " '27/09/2017',\n",
       " '28/09/2017',\n",
       " '29/09/2017',\n",
       " '30/09/2017',\n",
       " '01/10/2017',\n",
       " '02/10/2017',\n",
       " '03/10/2017',\n",
       " '04/10/2017',\n",
       " '05/10/2017',\n",
       " '06/10/2017',\n",
       " '07/10/2017',\n",
       " '08/10/2017',\n",
       " '09/10/2017',\n",
       " '10/10/2017',\n",
       " '11/10/2017',\n",
       " '12/10/2017',\n",
       " '13/10/2017',\n",
       " '14/10/2017',\n",
       " '15/10/2017',\n",
       " '16/10/2017',\n",
       " '17/10/2017',\n",
       " '18/10/2017',\n",
       " '19/10/2017',\n",
       " '20/10/2017',\n",
       " '21/10/2017',\n",
       " '22/10/2017',\n",
       " '23/10/2017',\n",
       " '24/10/2017',\n",
       " '25/10/2017',\n",
       " '26/10/2017',\n",
       " '27/10/2017',\n",
       " '28/10/2017',\n",
       " '29/10/2017',\n",
       " '30/10/2017',\n",
       " '31/10/2017',\n",
       " '01/11/2017',\n",
       " '02/11/2017',\n",
       " '03/11/2017',\n",
       " '04/11/2017',\n",
       " '05/11/2017',\n",
       " '06/11/2017',\n",
       " '07/11/2017',\n",
       " '08/11/2017',\n",
       " '09/11/2017',\n",
       " '10/11/2017',\n",
       " '11/11/2017',\n",
       " '12/11/2017',\n",
       " '13/11/2017',\n",
       " '14/11/2017',\n",
       " '15/11/2017',\n",
       " '16/11/2017',\n",
       " '17/11/2017',\n",
       " '18/11/2017',\n",
       " '19/11/2017',\n",
       " '20/11/2017',\n",
       " '21/11/2017',\n",
       " '22/11/2017',\n",
       " '23/11/2017',\n",
       " '24/11/2017',\n",
       " '25/11/2017',\n",
       " '26/11/2017',\n",
       " '27/11/2017',\n",
       " '28/11/2017',\n",
       " '29/11/2017',\n",
       " '30/11/2017',\n",
       " '01/12/2017',\n",
       " '02/12/2017',\n",
       " '03/12/2017',\n",
       " '04/12/2017',\n",
       " '05/12/2017',\n",
       " '06/12/2017',\n",
       " '07/12/2017',\n",
       " '08/12/2017',\n",
       " '09/12/2017',\n",
       " '10/12/2017',\n",
       " '11/12/2017',\n",
       " '12/12/2017',\n",
       " '13/12/2017',\n",
       " '14/12/2017',\n",
       " '15/12/2017',\n",
       " '16/12/2017',\n",
       " '17/12/2017',\n",
       " '18/12/2017',\n",
       " '19/12/2017',\n",
       " '20/12/2017',\n",
       " '21/12/2017',\n",
       " '22/12/2017',\n",
       " '23/12/2017',\n",
       " '24/12/2017',\n",
       " '25/12/2017',\n",
       " '26/12/2017',\n",
       " '27/12/2017',\n",
       " '28/12/2017',\n",
       " '29/12/2017',\n",
       " '30/12/2017',\n",
       " '31/12/2017',\n",
       " '01/01/2018',\n",
       " '02/01/2018',\n",
       " '03/01/2018',\n",
       " '04/01/2018',\n",
       " '05/01/2018',\n",
       " '06/01/2018',\n",
       " '07/01/2018',\n",
       " '08/01/2018',\n",
       " '09/01/2018',\n",
       " '10/01/2018',\n",
       " '11/01/2018',\n",
       " '12/01/2018',\n",
       " '13/01/2018',\n",
       " '14/01/2018',\n",
       " '15/01/2018',\n",
       " '16/01/2018',\n",
       " '17/01/2018',\n",
       " '18/01/2018',\n",
       " '19/01/2018',\n",
       " '20/01/2018',\n",
       " '21/01/2018',\n",
       " '22/01/2018',\n",
       " '23/01/2018',\n",
       " '24/01/2018',\n",
       " '25/01/2018',\n",
       " '26/01/2018',\n",
       " '27/01/2018',\n",
       " '28/01/2018',\n",
       " '29/01/2018',\n",
       " '30/01/2018',\n",
       " '31/01/2018',\n",
       " '01/02/2018',\n",
       " '02/02/2018',\n",
       " '03/02/2018',\n",
       " '04/02/2018',\n",
       " '05/02/2018',\n",
       " '06/02/2018',\n",
       " '07/02/2018',\n",
       " '08/02/2018',\n",
       " '09/02/2018',\n",
       " '10/02/2018',\n",
       " '11/02/2018',\n",
       " '12/02/2018',\n",
       " '13/02/2018',\n",
       " '14/02/2018',\n",
       " '15/02/2018',\n",
       " '16/02/2018',\n",
       " '17/02/2018',\n",
       " '18/02/2018',\n",
       " '19/02/2018',\n",
       " '20/02/2018',\n",
       " '21/02/2018',\n",
       " '22/02/2018',\n",
       " '23/02/2018',\n",
       " '24/02/2018',\n",
       " '25/02/2018',\n",
       " '26/02/2018',\n",
       " '27/02/2018',\n",
       " '28/02/2018',\n",
       " '01/03/2018',\n",
       " '02/03/2018',\n",
       " '03/03/2018',\n",
       " '04/03/2018',\n",
       " '05/03/2018',\n",
       " '06/03/2018',\n",
       " '07/03/2018',\n",
       " '08/03/2018',\n",
       " '09/03/2018',\n",
       " '10/03/2018',\n",
       " '11/03/2018',\n",
       " '12/03/2018',\n",
       " '13/03/2018',\n",
       " '14/03/2018',\n",
       " '15/03/2018',\n",
       " '16/03/2018',\n",
       " '17/03/2018',\n",
       " '18/03/2018',\n",
       " '19/03/2018',\n",
       " '20/03/2018',\n",
       " '21/03/2018',\n",
       " '22/03/2018',\n",
       " '23/03/2018',\n",
       " '24/03/2018',\n",
       " '25/03/2018',\n",
       " '26/03/2018',\n",
       " '27/03/2018',\n",
       " '28/03/2018',\n",
       " '29/03/2018',\n",
       " '30/03/2018',\n",
       " '31/03/2018',\n",
       " '01/04/2018',\n",
       " '02/04/2018',\n",
       " '03/04/2018',\n",
       " '04/04/2018',\n",
       " '05/04/2018',\n",
       " '06/04/2018',\n",
       " '07/04/2018',\n",
       " '08/04/2018',\n",
       " '09/04/2018',\n",
       " '10/04/2018',\n",
       " '11/04/2018',\n",
       " '12/04/2018',\n",
       " '13/04/2018',\n",
       " '14/04/2018',\n",
       " '15/04/2018',\n",
       " '16/04/2018',\n",
       " '17/04/2018',\n",
       " '18/04/2018',\n",
       " '19/04/2018',\n",
       " '20/04/2018',\n",
       " '21/04/2018',\n",
       " '22/04/2018',\n",
       " '23/04/2018',\n",
       " '24/04/2018',\n",
       " '25/04/2018',\n",
       " '26/04/2018',\n",
       " '27/04/2018',\n",
       " '28/04/2018',\n",
       " '29/04/2018',\n",
       " '30/04/2018',\n",
       " '01/05/2018',\n",
       " '02/05/2018',\n",
       " '03/05/2018',\n",
       " '04/05/2018',\n",
       " '05/05/2018',\n",
       " '06/05/2018',\n",
       " '07/05/2018',\n",
       " '08/05/2018',\n",
       " '09/05/2018',\n",
       " '10/05/2018',\n",
       " '11/05/2018',\n",
       " '12/05/2018',\n",
       " '13/05/2018',\n",
       " '14/05/2018',\n",
       " '15/05/2018',\n",
       " '16/05/2018',\n",
       " '17/05/2018',\n",
       " '18/05/2018',\n",
       " '19/05/2018',\n",
       " '20/05/2018',\n",
       " '21/05/2018',\n",
       " '22/05/2018',\n",
       " '23/05/2018',\n",
       " '24/05/2018',\n",
       " '25/05/2018',\n",
       " '26/05/2018',\n",
       " '27/05/2018',\n",
       " '28/05/2018',\n",
       " '29/05/2018',\n",
       " '30/05/2018',\n",
       " '31/05/2018',\n",
       " '01/06/2018',\n",
       " '02/06/2018',\n",
       " '03/06/2018',\n",
       " '04/06/2018',\n",
       " '05/06/2018',\n",
       " '06/06/2018',\n",
       " '07/06/2018',\n",
       " '08/06/2018',\n",
       " '09/06/2018',\n",
       " '10/06/2018',\n",
       " '11/06/2018',\n",
       " '12/06/2018',\n",
       " '13/06/2018',\n",
       " '14/06/2018',\n",
       " '15/06/2018',\n",
       " '16/06/2018',\n",
       " '17/06/2018',\n",
       " '18/06/2018',\n",
       " '19/06/2018',\n",
       " '20/06/2018',\n",
       " '21/06/2018',\n",
       " '22/06/2018',\n",
       " '23/06/2018',\n",
       " '24/06/2018',\n",
       " '25/06/2018',\n",
       " '26/06/2018',\n",
       " '27/06/2018',\n",
       " '28/06/2018',\n",
       " '29/06/2018',\n",
       " '30/06/2018',\n",
       " '01/07/2018',\n",
       " '02/07/2018',\n",
       " '03/07/2018',\n",
       " '04/07/2018',\n",
       " '05/07/2018',\n",
       " '06/07/2018',\n",
       " '07/07/2018',\n",
       " '08/07/2018',\n",
       " '09/07/2018',\n",
       " '10/07/2018',\n",
       " '11/07/2018',\n",
       " '12/07/2018',\n",
       " '13/07/2018',\n",
       " '14/07/2018',\n",
       " '15/07/2018',\n",
       " '16/07/2018',\n",
       " '17/07/2018',\n",
       " '18/07/2018',\n",
       " '19/07/2018',\n",
       " '20/07/2018',\n",
       " '21/07/2018',\n",
       " '22/07/2018',\n",
       " '23/07/2018',\n",
       " '24/07/2018',\n",
       " '25/07/2018',\n",
       " '26/07/2018',\n",
       " '27/07/2018',\n",
       " '28/07/2018',\n",
       " '29/07/2018',\n",
       " '30/07/2018',\n",
       " '31/07/2018',\n",
       " '01/08/2018',\n",
       " '02/08/2018',\n",
       " '03/08/2018',\n",
       " '04/08/2018',\n",
       " '05/08/2018',\n",
       " '06/08/2018',\n",
       " '07/08/2018',\n",
       " '08/08/2018',\n",
       " '09/08/2018',\n",
       " '10/08/2018',\n",
       " '11/08/2018',\n",
       " '12/08/2018',\n",
       " '13/08/2018',\n",
       " '14/08/2018',\n",
       " '15/08/2018',\n",
       " '16/08/2018',\n",
       " '17/08/2018',\n",
       " '18/08/2018',\n",
       " '19/08/2018',\n",
       " '20/08/2018',\n",
       " '21/08/2018',\n",
       " '22/08/2018',\n",
       " '23/08/2018',\n",
       " '24/08/2018',\n",
       " '25/08/2018',\n",
       " '26/08/2018',\n",
       " '27/08/2018',\n",
       " '28/08/2018',\n",
       " '29/08/2018',\n",
       " '30/08/2018',\n",
       " '31/08/2018',\n",
       " '01/09/2018',\n",
       " '02/09/2018',\n",
       " '03/09/2018',\n",
       " '04/09/2018',\n",
       " '05/09/2018',\n",
       " '06/09/2018',\n",
       " '07/09/2018',\n",
       " '08/09/2018',\n",
       " '09/09/2018',\n",
       " '10/09/2018',\n",
       " '11/09/2018',\n",
       " '12/09/2018',\n",
       " '13/09/2018',\n",
       " '14/09/2018',\n",
       " '15/09/2018',\n",
       " '16/09/2018',\n",
       " '17/09/2018',\n",
       " '18/09/2018',\n",
       " '19/09/2018',\n",
       " '20/09/2018',\n",
       " '21/09/2018',\n",
       " '22/09/2018',\n",
       " '23/09/2018',\n",
       " '24/09/2018',\n",
       " '25/09/2018',\n",
       " '26/09/2018',\n",
       " ...]"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "0d2d535e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datetime</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-11-01 07:00:00</th>\n",
       "      <td>70.925000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 09:00:00</th>\n",
       "      <td>71.494643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 11:00:00</th>\n",
       "      <td>68.635714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 13:00:00</th>\n",
       "      <td>63.314286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 15:00:00</th>\n",
       "      <td>65.630357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30 07:00:00</th>\n",
       "      <td>97.455556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30 09:00:00</th>\n",
       "      <td>98.826786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30 11:00:00</th>\n",
       "      <td>96.619643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30 13:00:00</th>\n",
       "      <td>96.621429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30 15:00:00</th>\n",
       "      <td>94.426786</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>353 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Price\n",
       "                          mean\n",
       "Datetime                      \n",
       "2021-11-01 07:00:00  70.925000\n",
       "2021-11-01 09:00:00  71.494643\n",
       "2021-11-01 11:00:00  68.635714\n",
       "2021-11-01 13:00:00  63.314286\n",
       "2021-11-01 15:00:00  65.630357\n",
       "...                        ...\n",
       "2021-11-30 07:00:00  97.455556\n",
       "2021-11-30 09:00:00  98.826786\n",
       "2021-11-30 11:00:00  96.619643\n",
       "2021-11-30 13:00:00  96.621429\n",
       "2021-11-30 15:00:00  94.426786\n",
       "\n",
       "[353 rows x 1 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.resample('2H', offset='7H')[['Price']].agg(['mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4557041e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-11-01</th>\n",
       "      <td>D</td>\n",
       "      <td>66.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-02</th>\n",
       "      <td>D</td>\n",
       "      <td>70.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-03</th>\n",
       "      <td>D</td>\n",
       "      <td>78.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-04</th>\n",
       "      <td>D</td>\n",
       "      <td>72.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-05</th>\n",
       "      <td>D</td>\n",
       "      <td>72.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-06</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-07</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-08</th>\n",
       "      <td>D</td>\n",
       "      <td>77.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-09</th>\n",
       "      <td>D</td>\n",
       "      <td>70.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-10</th>\n",
       "      <td>D</td>\n",
       "      <td>70.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-11</th>\n",
       "      <td>D</td>\n",
       "      <td>74.325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-12</th>\n",
       "      <td>D</td>\n",
       "      <td>74.975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-13</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-14</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-15</th>\n",
       "      <td>D</td>\n",
       "      <td>80.275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-16</th>\n",
       "      <td>D</td>\n",
       "      <td>94.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-17</th>\n",
       "      <td>D</td>\n",
       "      <td>94.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-18</th>\n",
       "      <td>D</td>\n",
       "      <td>91.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-19</th>\n",
       "      <td>D</td>\n",
       "      <td>86.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-20</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-21</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-22</th>\n",
       "      <td>D</td>\n",
       "      <td>84.775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-23</th>\n",
       "      <td>D</td>\n",
       "      <td>93.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-24</th>\n",
       "      <td>D</td>\n",
       "      <td>93.350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-25</th>\n",
       "      <td>D</td>\n",
       "      <td>92.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-26</th>\n",
       "      <td>D</td>\n",
       "      <td>88.350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>D</td>\n",
       "      <td>94.900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>D</td>\n",
       "      <td>91.700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Resolution   Price\n",
       "Datetime                     \n",
       "2021-11-01          D  66.100\n",
       "2021-11-02          D  70.000\n",
       "2021-11-03          D  78.375\n",
       "2021-11-04          D  72.000\n",
       "2021-11-05          D  72.500\n",
       "2021-11-06          D     NaN\n",
       "2021-11-07          D     NaN\n",
       "2021-11-08          D  77.450\n",
       "2021-11-09          D  70.400\n",
       "2021-11-10          D  70.700\n",
       "2021-11-11          D  74.325\n",
       "2021-11-12          D  74.975\n",
       "2021-11-13          D     NaN\n",
       "2021-11-14          D     NaN\n",
       "2021-11-15          D  80.275\n",
       "2021-11-16          D  94.500\n",
       "2021-11-17          D  94.000\n",
       "2021-11-18          D  91.700\n",
       "2021-11-19          D  86.000\n",
       "2021-11-20          D     NaN\n",
       "2021-11-21          D     NaN\n",
       "2021-11-22          D  84.775\n",
       "2021-11-23          D  93.875\n",
       "2021-11-24          D  93.350\n",
       "2021-11-25          D  92.625\n",
       "2021-11-26          D  88.350\n",
       "2021-11-27          D     NaN\n",
       "2021-11-28          D     NaN\n",
       "2021-11-29          D  94.900\n",
       "2021-11-30          D  91.700"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['Resolution']=='D']#['Price']/12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "9160d05c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-11-01 07:00:00</th>\n",
       "      <td>10MIN</td>\n",
       "      <td>70.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 07:10:00</th>\n",
       "      <td>10MIN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 07:20:00</th>\n",
       "      <td>10MIN</td>\n",
       "      <td>71.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 07:30:00</th>\n",
       "      <td>10MIN</td>\n",
       "      <td>71.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01 07:40:00</th>\n",
       "      <td>10MIN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-26 00:00:00</th>\n",
       "      <td>D</td>\n",
       "      <td>88.350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27 00:00:00</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28 00:00:00</th>\n",
       "      <td>D</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29 00:00:00</th>\n",
       "      <td>D</td>\n",
       "      <td>94.900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30 00:00:00</th>\n",
       "      <td>D</td>\n",
       "      <td>91.700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1570 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Resolution   Price\n",
       "Datetime                              \n",
       "2021-11-01 07:00:00      10MIN  70.000\n",
       "2021-11-01 07:10:00      10MIN     NaN\n",
       "2021-11-01 07:20:00      10MIN  71.500\n",
       "2021-11-01 07:30:00      10MIN  71.375\n",
       "2021-11-01 07:40:00      10MIN     NaN\n",
       "...                        ...     ...\n",
       "2021-11-26 00:00:00          D  88.350\n",
       "2021-11-27 00:00:00          D     NaN\n",
       "2021-11-28 00:00:00          D     NaN\n",
       "2021-11-29 00:00:00          D  94.900\n",
       "2021-11-30 00:00:00          D  91.700\n",
       "\n",
       "[1570 rows x 2 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['Resolution']=='D'].resample('2H')[['Price']].agg(['mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "14842f7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "consumption = pd.read_csv('Consumption.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42ba98b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/01/2016</td>\n",
       "      <td>276.2910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02/01/2016</td>\n",
       "      <td>294.6780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03/01/2016</td>\n",
       "      <td>306.3096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04/01/2016</td>\n",
       "      <td>370.0566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05/01/2016</td>\n",
       "      <td>367.3998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2463</th>\n",
       "      <td>29/09/2022</td>\n",
       "      <td>258.0822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2464</th>\n",
       "      <td>30/09/2022</td>\n",
       "      <td>242.5950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2465</th>\n",
       "      <td>01/10/2022</td>\n",
       "      <td>188.0658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2466</th>\n",
       "      <td>02/10/2022</td>\n",
       "      <td>190.6092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2467</th>\n",
       "      <td>03/10/2022</td>\n",
       "      <td>210.3246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2468 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date  Consumption\n",
       "0     01/01/2016     276.2910\n",
       "1     02/01/2016     294.6780\n",
       "2     03/01/2016     306.3096\n",
       "3     04/01/2016     370.0566\n",
       "4     05/01/2016     367.3998\n",
       "...          ...          ...\n",
       "2463  29/09/2022     258.0822\n",
       "2464  30/09/2022     242.5950\n",
       "2465  01/10/2022     188.0658\n",
       "2466  02/10/2022     190.6092\n",
       "2467  03/10/2022     210.3246\n",
       "\n",
       "[2468 rows x 2 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consumption"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "e59c294d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#pd.Series(pd.date_range(consumption['Date'], freq=\"M\", periods=3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "8d4b639b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#pd.to_datetime(consumption['Date'], format='%Y%m%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "df21e81e",
   "metadata": {},
   "outputs": [],
   "source": [
    "trades = pd.read_csv('trades.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "841cc01e",
   "metadata": {},
   "outputs": [],
   "source": [
    "trades['TradeDateTime'] = pd.to_datetime(trades['TradeDateTime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "42ab4273",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TradeDateTime</th>\n",
       "      <th>Product</th>\n",
       "      <th>Contract</th>\n",
       "      <th>Price</th>\n",
       "      <th>Quantity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-04-18 00:37:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>20.5000</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-04-18 00:42:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>20.6500</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-04-18 00:42:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>20.6500</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-04-18 00:50:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>20.6500</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-04-18 00:54:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>20.6500</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70090</th>\n",
       "      <td>2022-04-21 21:13:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>18.6375</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70091</th>\n",
       "      <td>2022-04-21 21:56:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>18.3500</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70092</th>\n",
       "      <td>2022-04-21 22:05:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>18.3000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70093</th>\n",
       "      <td>2022-04-21 22:07:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>18.3000</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70094</th>\n",
       "      <td>2022-04-21 22:07:00</td>\n",
       "      <td>Emission - Venue A</td>\n",
       "      <td>DA</td>\n",
       "      <td>18.3000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70095 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            TradeDateTime             Product Contract    Price  Quantity\n",
       "0     2022-04-18 00:37:00  Emission - Venue A       DA  20.5000        60\n",
       "1     2022-04-18 00:42:00  Emission - Venue A       DA  20.6500        30\n",
       "2     2022-04-18 00:42:00  Emission - Venue A       DA  20.6500        30\n",
       "3     2022-04-18 00:50:00  Emission - Venue A       DA  20.6500       500\n",
       "4     2022-04-18 00:54:00  Emission - Venue A       DA  20.6500       100\n",
       "...                   ...                 ...      ...      ...       ...\n",
       "70090 2022-04-21 21:13:00  Emission - Venue A       DA  18.6375        70\n",
       "70091 2022-04-21 21:56:00  Emission - Venue A       DA  18.3500       100\n",
       "70092 2022-04-21 22:05:00  Emission - Venue A       DA  18.3000         4\n",
       "70093 2022-04-21 22:07:00  Emission - Venue A       DA  18.3000        77\n",
       "70094 2022-04-21 22:07:00  Emission - Venue A       DA  18.3000         4\n",
       "\n",
       "[70095 rows x 5 columns]"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ddc61b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime.datetime\n",
    "from typing import Union\n",
    "\n",
    "def create_ohlc_data(begin, end,products,freq):\n",
    "    \n",
    "    # imports raw data\n",
    "    trades_raw = pd.read_csv('trades.csv')\n",
    "    \n",
    "    trades_raw['TradeDateTime'] = pd.to_datetime(trades_raw['TradeDateTime'])\n",
    "    \n",
    "    # filters requested dates \n",
    "    trades_filtered = trades_raw[\n",
    "        ( trades_raw['TradeDateTime'] >= begin ) &\n",
    "        ( trades_raw['TradeDateTime'] <= end )\n",
    "    ].copy()\n",
    "    \n",
    "    \n",
    "    # filters products\n",
    "    \n",
    "    trades_filtered = trades_filtered[\n",
    "        trades_filtered['Product'].isin(products)\n",
    "    ]\n",
    "    \n",
    "    freq_number = ''.join(filter(str.isdigit, freq))\n",
    "    freq_interval = ''.join(filter(str.isalpha, freq))\n",
    "    \n",
    "    if freq_interval == 'D':\n",
    "        interval = freq_number * 24 * 60\n",
    "    elif freq_interval == 'H':\n",
    "        interval = freq_number * 60\n",
    "    \n",
    "    if freq_interval in ['MIN', 'H']:\n",
    "        \n",
    "    \n",
    "    # reads contract info and counts\n",
    "    contracts = dict()\n",
    "    \n",
    "    for product in products:\n",
    "        _contracts = trades_filtered.query(f'Product == {product}')['Contract'].unique()\n",
    "        _contract_count = _contracts.size\n",
    "        contracts[product] = {'contracts' : _contracts,\n",
    "                              'count' : _contract_count\n",
    "                             }\n",
    "        \n",
    "        \n",
    "    \n",
    "    \n",
    "    # initialize return object\n",
    "    ohlc_data_dict = dict() # <-- return this\n",
    "    # {\n",
    "    #  <product_1> : {\n",
    "    #     <contract_1> : ohlc_dataframe ,\n",
    "    #     <contract_2> : ohlc_dataframe ,\n",
    "    #     ...\n",
    "    #    },\n",
    "    #  <product_2> : {\n",
    "    #     <contract_1> : ohlc_dataframe ,\n",
    "    #     <contract_2> : ohlc_dataframe ,\n",
    "    #     ...\n",
    "    #    },\n",
    "    #  ...\n",
    "    # }\n",
    "    #\n",
    "    \n",
    "    for product in products:\n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    trade_raw_data = trades[trades['Product'].isin(\n",
    "    \n",
    "    \n",
    "    return ohlc_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "1dc21b85",
   "metadata": {},
   "outputs": [],
   "source": [
    "trades_filtered = trades[\n",
    "        ( trades['TradeDateTime'] >= '2022-04-18 00:37:00' ) &\n",
    "        ( trades['TradeDateTime'] <= '2022-04-18 00:42:00' )\n",
    "    ].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "a5fd8186",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20.65"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trades_filtered.Price.max()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
